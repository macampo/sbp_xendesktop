# $Id: Generated by chef for node: <%= node['hostname'] %>
# --------------------------------------------------------------
# NOTE: This file is controlled by chef templates!
#   Do not edit or change this file but change the following:
#    * template file: <%= @template_file %>
#    * recipe file: <%= @recipe_file %>
# --------------------------------------------------------------
# Schuberg Philis 2014
# --------------------------------------------------------------

# $ErrorActionPreference = "SilentlyContinue"

$XDSFListenerPort = "<%= @config['listnerport'] %>"
$XDSFXMLPort = "<%= @config['xmlport'] %>"
$XDSFTransportType = "<%= @config['transporttype'] %>"
$XDSFXMLTransportType = "<%= @config['xmltransporttype'] %>"
$XDSSLRelayPort = "<%= @config['relayport'] %>"
$XDFarmType = "<%= @config['farmtype'] %>"

$XDDeliveryControllers = @(<%= @deliverycontrollers %>)
$XDSFServers = @(<%= @config['servers'].map { |s| "\"#{s}\"" }.join(',') %>)
$XDSFVIPNName = "<%= @config['vipname'] %>"
$XDSiteName = "<%= @sitename %>"

$XDSFCert = "<%= @cert_path %>\<%= @config['vipname'] %>.pfx"
$XDSFCert_Password = "<%= @config['cert_password'] %>"
$XDCertIsSelfSigned = $<%= @config['cert_self_signed'] %>
$XDNSRootCert = "<%= @cert_path %>\<%= @config['nsrootcert'] %>"
$XDNSRootCertName = "<%= @config['nsrootcertname'] %>"
$XDNSRootCertStore = "<%= @config['nsrootcertstore'] %>"
$XDSFLogging_Folder = "<%= @config['csf_logging_folder'] %>"

# Functions

# Use this function to import PFX certificates (including private key)
function Import-PfxCertificate
	{

	param([String]$certPath,[String]$certRootStore = "CurrentUser",[String]$certStore = "My",$pfxPass = $null)
	$pfx = new-object System.Security.Cryptography.X509Certificates.X509Certificate2

	if ($pfxPass -eq $null)
		{
		$pfxPass = read-host "Enter the pfx password" -assecurestring
		}

	$pfx.import($certPath,$pfxPass,"Exportable,PersistKeySet")

	$store = new-object System.Security.Cryptography.X509Certificates.X509Store($certStore,$certRootStore)
	$store.open("MaxAllowed")
	$store.add($pfx)
	$store.close()
	}

# Use this function to import other certificates (.p12, .cer, .crt)
function Import-Certificate
{
	param
	(
		[IO.FileInfo] $CertFile = $(throw "Parameter -CertFile [System.IO.FileInfo] is required."),
		[string[]] $StoreNames = $(throw "Parameter -StoreNames [System.String] is required."),
		[switch] $LocalMachine,
		[switch] $CurrentUser,
		[string] $CertPassword,
		[switch] $Verbose
	)

	begin
	{
		[void][System.Reflection.Assembly]::LoadWithPartialName("System.Security")
	}

	process
	{
        if ($Verbose)
		{
            $VerbosePreference = 'Continue'
        }

		if (-not $LocalMachine -and -not $CurrentUser)
		{
			Write-Warning "One or both of the following parameters are required: '-LocalMachine' '-CurrentUser'. Skipping certificate '$CertFile'."
		}

		try
		{
			if ($_)
            {
                $certfile = $_
            }
            $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2 $certfile,$CertPassword
		}
		catch
		{
			Write-Error ("Error importing '$certfile': $_ .") -ErrorAction:Continue
		}

		if ($cert -and $LocalMachine)
		{
			$StoreScope = "LocalMachine"
			$StoreNames | ForEach-Object {
				$StoreName = $_
				if (Test-Path "cert:\$StoreScope\$StoreName")
				{
					try
					{
						$store = New-Object System.Security.Cryptography.X509Certificates.X509Store $StoreName, $StoreScope
						$store.Open([System.Security.Cryptography.X509Certificates.OpenFlags]::ReadWrite)
						$store.Add($cert)
						$store.Close()
						Write-Verbose "Successfully added '$certfile' to 'cert:\$StoreScope\$StoreName'."
					}
					catch
					{
						Write-Error ("Error adding '$certfile' to 'cert:\$StoreScope\$StoreName': $_ .") -ErrorAction:Continue
					}
				}
				else
				{
					Write-Warning "Certificate store '$StoreName' does not exist. Skipping..."
				}
			}
		}

		if ($cert -and $CurrentUser)
		{
			$StoreScope = "CurrentUser"
			$StoreNames | ForEach-Object {
				$StoreName = $_
				if (Test-Path "cert:\$StoreScope\$StoreName")
				{
					try
					{
						$store = New-Object System.Security.Cryptography.X509Certificates.X509Store $StoreName, $StoreScope
						$store.Open([System.Security.Cryptography.X509Certificates.OpenFlags]::ReadWrite)
						$store.Add($cert)
						$store.Close()
						Write-Verbose "Successfully added '$certfile' to 'cert:\$StoreScope\$StoreName'."
					}
					catch
					{
						Write-Error ("Error adding '$certfile' to 'cert:\$StoreScope\$StoreName': $_ .") -ErrorAction:Continue
					}
				}
				else
				{
					Write-Warning "Certificate store '$StoreName' does not exist. Skipping..."
				}
			}
		}
	}

	end
	{ }
}




# Set-ItemProperty -path "HKCU:\Software\Microsoft\Windows\CurrentVersion\WinTrust\Trust Providers\Software Publishing" -name State -value 146944

# 1: Import Module for Citrix Configuration
if((Get-Module |?{$_.Name -eq "Citrix.XenDesktop.Admin"}) -eq $null){
  write-host -foreground Red "[WARN] Module and SnapIn Citrix* is not loaded.."
  import-module Citrix.XenDesktop.Admin
  Add-PSSnapin Citrix*
  Import-Module WebAdministration
  write-host -foreground Green "[INFO] Module and SnapIn Citrix* is loaded.."
}
else{
  write-host -foreground Green "[INFO] Module and SnapIn Citrix* is loaded.."
}

If (Test-Path "C:\Program Files\Citrix\Receiver StoreFront\Scripts\ImportModules.ps1")
	{
    & "C:\Program Files\Citrix\Receiver StoreFront\Scripts\ImportModules.ps1"
    write-host -foreground Green "[INFO] Specific Storefront Powershell found and is loaded.."
	}
Else
	{
	Write-Host -foreground Red "[ERROR] Specific Storefront Powershell module not found. Apparently Storefront installation did not go well."
	Exit 1
	}



# Disable IE ESC for Admin users
Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A7-37EF-4b3f-8CFC-4F3A74704073}" IsInstalled -Value 0 -Force
Stop-process -name explorer -Force -EA SilentlyContinue

# First we verify that this server is in the list of possible Storefront Servers. If not then this server should not be added.
$IsSFServer = $false
ForEach ($XDSFServer in $XDSFServers)
    {
    If ($XDSFServer -match $env:COMPUTERNAME.toLower())
        {
        $IsSFServer = $true
        write-host -foreground Green "[INFO] STorefront Server: $env:COMPUTERNAME found in array: $XDSFServers Array"
        }
    }

If ($IsSFServer -eq $false)
#    {
    {
    Write-Host -foreground Red "[ERROR] This server is not in the list of Storefront Servers. Exiting the script now!"
    Exit 1
    }

# Now check if on this server a Storefront Site can be found. If so, then this server has already been added and nothing needs to be done.
$GetDSSiteExist = get-DSSiteIsConfigured
If ($GetDSSiteExist.IsSiteConfigured -eq $true)
	{
	write-host -foreground Green "[INFO] A Storefront Site has alreay been configured and this server can find it. Therefore it is assumed that this script has already been run."
	Exit 0
	}


# Import PFX certificate
# Only do this if a certificate file is found. Otherwise it is assumed that a certificate is not used.
if (Test-Path -path $XDSFCert)
	{
	# Check if certificate is already in the store. Otherwise add it.
	$CertExists = $false
	$allCerts = Get-ChildItem cert:\localmachine\my

	foreach ($cert in $allCerts)
		{
    		if ($cert.SubjectName.Name -match $XDSFVIPNName)
			{
        		$CertExists = $true
        		write-host -foreground Green "[INFO] The Storefront certificate is already installed"
			}
		}

	If ($CertExists -eq $false)
		{
        	Import-PfxCertificate $XDSFCert "LocalMachine" "My" $XDSFCert_Password
		Write-Host -foreground Green "[INFO] Certificate imported in the Local Machine personal store"

		# If the variable XDCertIsSelfSigned is true, then also add the certificate to the trusted root
		If ($XDCertIsSelfSigned -eq $true)
			{
	        	Import-PfxCertificate $XDSFCert "LocalMachine" "AuthRoot" $XDSFCert_Password
		 	write-host -foreground Green "[INFO] Certificate imported in the Local Machine Trusted Root store"
			}

		# Now bind the certificate to the listener port of the default site

                invoke-command -scriptblock {iisreset}
                timeout 30


		# Find the Certificate that is defined for the Storefront VIP
    		$allCerts = Get-ChildItem cert:\localmachine\my

    		Foreach ($cert in $allCerts)
			{
			$allCerts
            		if ($cert.SubjectName.Name -match $XDSFVIPNName)
				{
				$DomainCert = $cert
				}
			}

		# Do the binding

		New-WebBinding -Name "Default Web Site" -IP "*" -Port $XDSFlistenerport -Protocol $XDSFTransportType
    		write-host -foreground Green "[INFO] Binding created for the Default Web Site"

		$certObj = Get-Item $DomainCert.PSPath
		New-Item IIS:SslBindings\0.0.0.0!443 -value $certObj
    		write-host -foreground Green "[INFO] Certificate has been linked to the binding"

		}
	}
# Import the signing (root) certificate for the certificate that is used for the remote access URL. The Storefront server
# makes a callback to the Netscaler and for that to work it must trust the certificate of the Netscaler

# Check if certificate is already in the store. Otherwise add it.
# Only do this if a certificate file is found. Otherwise it is assumed that a certificate is not used.
if (Test-Path -path $XDNSRootCert)
        {

	$RootCertExists = $false
	$AllRootCerts = Get-ChildItem cert:\localmachine\$XDNSRootCertStore

	foreach ($cert in $AllRootCerts)
        	{
    		if ($cert.SubjectName.Name -match $XDNSRootCertName)
                	{
        		$RootCertExists = $true
        		write-host -foreground Green "[INFO] The Signing (root) certificate is already installed"
                	}
        	}

	If ($RootCertExists -eq $false)
        	{
		Import-Certificate -CertFile $XDNSRootCert -StoreNames $XDNSRootCertStore -LocalMachine
		}
	}

# Per default the first user that accesses the StoreFront website after a reboot or a IISREST is getting a time-out. By adding generatePublisherEvidence in the aspnet.config this is prevented.
$Paths = @("C:\Windows\Microsoft.NET\Framework\v2.0.50727\","C:\Windows\Microsoft.NET\Framework64\v2.0.50727\")
$File = "aspnet.config"
$FileBackup = "aspnet.config_orig"
ForEach ($Path in $Paths)
    {
    If (Test-Path ($Path + $File))
        {
        If (Test-Path ($Path + $FileBackup))
            {
            Remove-Item ($Path + $FileBackup)
            }
        Copy-Item ($Path + $File) ($Path + $FileBackup)
        $Text = get-content ($Path + $File)
        If (!($text -match "generatePublisherEvidence enabled"))
            {
            Write-Host -foreground Green "[OK] Aspnet.config changed in $Path"
            $NewText = @()
            Foreach ($Line in $Text)
                {
            	if ($Line -eq '        <SymbolReadingPolicy enabled="1" />')
                    {
                    $NewText += $Line
            		$NewText += '		<generatePublisherEvidence enabled="false"/>'
            	    }
            	else
                    {
            		$NewText += $Line
            	    }
                }
            $NewText | set-content ($Path + $File)
            }
      }
   }

# set the default logging path for IIS websites
if((Get-Module |?{$_.Name -eq "WebAdministration"}) -eq $null)
	{
        write-host -foreground Red "[NOK] WebAdministration module not loaded, loading...."
        import-module WebAdministration
        }
else
        {
        write-host -foreground Green "[OK] WebAdministration module loaded"
        }
Set-ItemProperty 'IIS:\Sites\Default Web Site' -Name logFile.directory -Value $XDSFLogging_Folder
Write-Host -foreground Green "[INFO] Set default logging location for IIS"



# Check if website can be reached. If so then the Storefront Server Group URL apparently already has been setup and this server only needs to be added to the Server Group.
# If the website cannot be contacted then a Storefront site does not yet exist and must be created.

$HostBaseURL = $XDSFTransportType + "://" + $XDSFVIPNName
$HostBaseURLStoreWeb = $HostBaseURL + "/Citrix/StoreWeb"
$web = New-Object Net.WebClient
$SiteAlreadyExists = $true
try
	{
    $web.DownloadString($HostBaseURLStoreWeb)
    }
catch
	{
    Write-Host -foreground Green "[INFO] A Storefront site cannot be contacted at all, so apparently it does not exist."
    Write-Host -foreground Green "[INFO] Therefore a Storefront Site will be created"
    Set-DSInitialConfiguration -hostbaseurl $hostbaseurl -farmname $XDSiteName -port $XDSFXMLPort -transporttype $XDSFXMLTransportType.ToUpper() -sslRelayPort $XDSSLRelayPort -servers $XDDeliveryControllers -loadbalance $false -farmtype $XDFarmType
    Write-Host -foreground Green "[INFO] A Storefront Site has been created"
    Exit 0
    }


Write-Host -foreground Green "[INFO] The StoreFront website can be found, so apparently another server is already running the website. This host only needs to be added to the Storefront Server Group, which cannot be scripted. Please add the server manually"

Exit 0
