# $Id: Generated by chef for node: <%= node['hostname'] %>
# --------------------------------------------------------------
# NOTE: This file is controlled by chef templates!
#   Do not edit or change this file but change the following:
#    * template file: <%= @template_file %>
#    * recipe file: <%= @recipe_file %>
# --------------------------------------------------------------
# Schuberg Philis 2014
# --------------------------------------------------------------

Param(
    [alias("DatabaseUsr")]
    [string]$XDDatabaseCreateUsr,
    [alias("DatabasePasswd")]
    [string]$XDDatabaseCreateUsrPwd
    )

$XDDeliveryControllers	= @(<%= @config['deliverycontrollers'].map { |s| "\"#{s}\"" }.join(',') %>)
$XDDatabaseServer = "<%= @config['databaseserver'] %>"
$XDFullAdminGroups = @(<%= @config['fulladmingroups'].map { |s| "\"#{s}\"" }.join(',') %>)
$XDSiteName = "<%= @sitename %>"
$XDDatabaseName_Site = "<%= @config['databasename_site'] %>"
$XDDatabaseName_Logging	= "<%= @config['databasename_logging'] %>"
$XDDatabaseName_Monitor	= "<%= @config['databasename_monitor'] %>"
$XDLogging_Folder = "<%= @config['cdc_logging_folder'] %>"

$XDLicenseServer = "<%= @config['licenseserver'] %>"
$XDLicenseServer_Port = "<%= @config['licenseserver_port'] %>"
$XDLicenseServer_LicensingModel	= "<%= @config['licenseserver_licensingmodel'] %>"
$XDLicenseServer_ProductCode = "<%= @config['licenseserver_productcode'] %>"
$XDLicenseServer_ProductEdition	= "<%= @config['licenseserver_productedition'] %>"
$XDLicenseServer_ProductVersion	= "<%= @config['licenseserver_productversion'] %>"
$XDLicenseServer_AddressType = "<%= @config['licenseserver_addresstype'] %>"

$CSHypervisorAddress = "<%= @config['hypervisoraddress'] %>"
$CSConnectionType = "<%= @config['connection_type'] %>"
$CSConnectionName = "<%= @config['connection_name'] %>"
$XDCloud_Api = "<%= @config['cloud_api'] %>"
$XDSecret_Api = "<%= @config['secret_api'] %>"
$CSPath = "<%= @config['path'] %>"
$CSRootPath = "<%= @config['rootpath'] %>"
$CSAvailabilityZonePath = "<%= @config['availabilityzonepath'] %>"
$CSNetworkPath = "<%= @config['networkpath'] %>"
$CSResourceName = "<%= @config['resourcename'] %>"

$Convert2SecureString = $XDDatabaseCreateUsrPwd | ConvertTo-SecureString -asPlainText -Force
$Database_CredObject = New-Object System.Management.Automation.PSCredential($XDDatabaseCreateUsr, $Convert2SecureString)

# Import Module for Citrix Configuration
if((Get-Module |?{$_.Name -eq "Citrix.XenDesktop.Admin"}) -eq $null){
  write-host -foreground Red "[WARN] Module and SnapIn Citrix* is not loaded.."
  import-module Citrix.XenDesktop.Admin
  Add-PSSnapin Citrix*
  write-host -foreground Green "[INFO] Module and SnapIn Citrix* is loaded.."
}
else{
  write-host -foreground Green "[INFO] Module and SnapIn Citrix* is loaded.."
}



# First we verify that this server is in the list of possible Xendektop Delivery Controllers. If not then this server should not be promoted.
$IsDeliveryController = $false
ForEach ($XDDeliveryController in $XDDeliveryControllers)
    {
    If ($XDDeliveryController -match $env:COMPUTERNAME.toLower())
        {
        $IsDeliveryController = $true
         write-host -foreground Green "[INFO] XenDesktop DeliveryController: $env:COMPUTERNAME found in array: $XDDeliveryControllers Array"
	 }
    }

If ($IsDeliveryController -eq $false)
    {
    Write-Host -foreground Red "[ERROR] Exit Script: This server is not in the listed as a XenDesktop DeliveryController"
    Exit 1
    }

# First check if a XD Site is already available. If available then only this server needs to be added as a Citrix Delivery Controller.
# Now check if ON this server a XD Site can be found. If so, then this server has already been added and nothing needs to be done.
$error.clear()
try {
  $GetXDSite = Get-XDSite
 }
catch {
#If (!($error -match "The Site associated with the Controller at address" ))
If ($error -match "The Site associated with the Controller at address 'localhost' is not configured") {
    write-host -foreground Red "[WARN] The Site associated with the Controller at address 'localhost' is not configured"
	}
}

If ($GetXDSite.name -eq $XDSitename) {
    Write-host -foreground Green "[INFO] A Xendesktop Site has alreay been configured. Therefore it is assumed that this script has already been run."
	Exit 0
   }

# Now check if a XD Site can be found via a different Delivery Controller. If so, then this server just needs to be added to the XD Site and then exit.
$error.clear()
$XDDeliveryControllersWithoutSite = @()
ForEach ($XDDeliveryController in $XDDeliveryControllers)
    {
    write-host "DLVCTRL: $XDDeliveryController"
    try
		{
        Get-XDSite -AdminAddress $XDDeliveryController
        }
    catch
		{
        $XDDeliveryControllersWithoutSite += $XDDeliveryController
        }
	}

$XDDeliveryControllersWithSite = @()
$XDDeliveryControllersWithSite = Compare-Object -referenceobject $XDDeliveryControllers -differenceobject $XDDeliveryControllersWithoutSite

If (!($XDDeliveryControllersWithSite -eq $null ))
    {
    ForEach ($XDDeliveryControllerWithSite in $XDDeliveryControllersWithSite)
		{
		if((Get-Module |?{$_.Name -eq "WebAdministration"}) -eq $null)
			{
	                write-host -foreground Red "[NOK] WebAdministration module not loaded, loading...."
        	        import-module WebAdministration
                	}
		else
			{
                	write-host -foreground Green "[OK] WebAdministration module loaded"
                	}
                Set-ItemProperty 'IIS:\Sites\Default Web Site' -Name logFile.directory -Value $XDLogging_Folder
		Write-Host -foreground Green "[INFO] Set default logging location for IIS"
		Import-Certificate -CertFile $VCenterCert -StoreNames TrustedPeople, Root -LocalMachine
        Write-Host -foreground Green "[INFO] Certificate Imported"
        Add-XDController -AdminAddress $env:COMPUTERNAME -SiteControllerAddress $XDDeliveryControllerWithSite.InputObject -SiteDatabaseCredentials $Database_CredObject -LoggingDatabaseCredentials $Database_CredObject -MonitorDatabaseCredentials $Database_CredObject
        Write-Host -foreground Green "[INFO] Delivery Controller if configured $env:COMPUTERNAME has been added to the site:$XDSiteName "
         Exit 0
		}
    }
# Apparently this is the first Delivery Controller and a XD site has not yet been created. Start that now.


# Create XenDesktop 7 Databases
New-XDDatabase -AdminAddress $env:COMPUTERNAME -SiteName $XDSiteName -DataStore Site -DatabaseServer $XDDatabaseServer -DatabaseName $XDDatabaseName_Site -DatabaseCredentials $Database_CredObject
New-XDDatabase -AdminAddress $env:COMPUTERNAME -SiteName $XDSiteName -DataStore Logging -DatabaseServer $XDDatabaseServer -DatabaseName $XDDatabaseName_Logging -DatabaseCredentials $Database_CredObject
New-XDDatabase -AdminAddress $env:COMPUTERNAME -SiteName $XDSiteName -DataStore Monitor -DatabaseServer $XDDatabaseServer -DatabaseName $XDDatabaseName_Monitor -DatabaseCredentials $Database_CredObject

# set the default logging folder for IIS
if((Get-Module |?{$_.Name -eq "WebAdministration"}) -eq $null)
	{
        write-host -foreground Red "[NOK] WebAdministration module not loaded, loading...."
        import-module WebAdministration
        }
else
        {
        write-host -foreground Green "[OK] WebAdministration module loaded"
        }
Set-ItemProperty 'IIS:\Sites\Default Web Site' -Name logFile.directory -Value $XDLogging_Folder
Write-Host -foreground Green "[INFO] Set default logging location for IIS"



# Create XenDesktop 7 Site
New-XDSite -AdminAddress $env:COMPUTERNAME -SiteName $XDSiteName -DatabaseServer $XDDatabaseServer -LoggingDatabaseName $XDDatabaseName_Logging -MonitorDatabaseName $XDDatabaseName_Monitor -SiteDatabaseName $XDDatabaseName_Site
Write-Host -foreground Green "[INFO] Created Xendesktop Site"


# Configure Site
Set-ConfigSite  -AdminAddress $env:COMPUTERNAME -LicenseServerName $XDLicenseServer -LicenseServerPort $XDLicenseServer_Port -LicensingModel $XDLicenseServer_LicensingModel -ProductCode $XDLicenseServer_ProductCode -ProductEdition $XDLicenseServer_ProductEdition -ProductVersion $XDLicenseServer_ProductVersion
$LicenseServer_AdminAddress = Get-LicLocation  -AddressType $XDLicenseServer_AddressType -LicenseServerAddress $XDLicenseServer -LicenseServerPort $XDLicenseServer_Port
$LicenseServer_CertificateHash = $(Get-LicCertificate  -AdminAddress $LicenseServer_AdminAddress).CertHash
Set-ConfigSiteMetadata  -AdminAddress $env:COMPUTERNAME -Name "CertificateHash" -Value $LicenseServer_CertificateHash

ForEach ($XDFullAdminGroup in $XDFullAdminGroups)
       {
       New-AdminAdministrator -AdminAddress $env:COMPUTERNAME -Name $XDFullAdminGroup
       Add-AdminRight -AdminAddress $env:COMPUTERNAME -Administrator $XDFullAdminGroup -Role 'Full Administrator' -All
       }


# Configure Hosting

$hConn = $null

$hConn = New-Item -AdminAddress $env:COMPUTERNAME -ConnectionType $CSConnectionType -HypervisorAddress $CSHypervisorAddress -Path $CSPath -Persist -Scope @() -Password $XDSecret_Api -UserName $XDCloud_Api
New-BrokerHypervisorConnection  -AdminAddress $env:COMPUTERNAME -HypHypervisorConnectionUid $hConn.HypervisorConnectionUid
New-Item -AvailabilityZonePath $CSAvailabilityZonePath -HypervisorConnectionName $CSConnectionName -NetworkPath $CSNetworkPath -Path $CSResourceName -PersonalvDiskStoragePath @() -RootPath $CSRootPath -StoragePath @()
